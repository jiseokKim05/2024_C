waypoint에서 직선의 방정식 구하기 추가 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int n = 0;

// 1. waypoint 데이터 읽어오기
void read_file(const char* filename, double X[], double Y[], double Angle[])
{
	FILE* file = fopen(filename, "r");

	if (file == NULL)
	{
		printf("File doesn't exist\n");
		return;
	}

	while (fscanf(file, "%lf %lf %lf", &X[n], &Y[n], &Angle[n]) != EOF)
	{
		n++;
		if (n >= 100)
		{
			break;
		}
	}

	fclose(file);
}

// 2. waypoint 간의 거리 함수
void interval(double X_ref[], double Y_ref[], double X[], double Y[])
{
	for (int i = 1; i < n; ++i)
	{
		X_ref[i] = X[i] - X[i - 1];
		Y_ref[i] = Y[i] - Y[i - 1];
	}
}

// 3. waypoint 상대좌표 함수
void relative_coordinate(double X_ref[], double Y_ref[], double X[], double Y[])
{
	for (int i = 0; i < n; ++i)
	{
		X_ref[i] = X[i] - X[0];
		Y_ref[i] = Y[i] - Y[0];
	}
}

// 4. waypoint 거리 함수
void DIST(double X[], double Y[], double Dist[])
{
	for (int i = 1; i < n; ++i)
	{
		Dist[i] = sqrt((X[i] - X[i - 1]) * (X[i] - X[i - 1]) + (Y[i] - Y[i - 1]) * (Y[i] - Y[i - 1]));
	}
}

// 5. waypoint yaw각도 함수
void YawAngles(double x[], double y[], int count, double yaw_angle[])
{
	for (int i = 0; i < n - 1; i++)
	{
		double dx = x[i + 1] - x[i];
		double dy = y[i + 1] - y[i];

		double angle = atan2(dy, dx) * 180.0 / 3.141592;

		if (angle < 0) angle += 360.0;

		yaw_angle[i] = angle;
	}

}

// 6. 거리 오름차순 함수
void ascending_sort(double X[], double Y[], double Angle[], double Dist[], int column)
{
	DIST(X, Y, Dist);
	double temp = 0;
	for (int i = 0; i < column; i++)
	{
		for (int j = i; j < column; j++)
		{
			if (Dist[i] > Dist[j])
			{
				// 거리 교환
				temp = Dist[i];
				Dist[i] = Dist[j];
				Dist[j] = temp;

				// X 교환
				temp = X[i];
				X[i] = X[j];
				X[j] = temp;

				// Y 교환
				temp = Y[i];
				Y[i] = Y[j];
				Y[j] = temp;

				// Angle 교환
				temp = Angle[i];
				Angle[i] = Angle[j];
				Angle[j] = temp;
			}
		}
	}
}

// 7. 거리 내림차순 함수
void descending_sort(double X[], double Y[], double Angle[], double Dist[], int column)
{
	DIST(X, Y, Dist);
	double temp = 0;
	for (int i = 0; i < column; i++)
	{
		for (int j = i; j < column; j++)
		{
			if (Dist[i] < Dist[j])
			{
				// 거리 교환
				temp = Dist[i];
				Dist[i] = Dist[j];
				Dist[j] = temp;

				// X 교환
				temp = X[i];
				X[i] = X[j];
				X[j] = temp;

				// Y 교환
				temp = Y[i];
				Y[i] = Y[j];
				Y[j] = temp;

				// Angle 교환
				temp = Angle[i];
				Angle[i] = Angle[j];
				Angle[j] = temp;
			}
		}
	}
}

// 직선의 방정식 함수
void straight(double X[], double Y[], double a[], double b[])
{
	for (int i = 0; i < n; i++)
	{
		a[i] = (Y[i + 1] - Y[i]) / (X[i + 1] - X[i]);
		b[i] = Y[i] - (a[i] * X[i]);
	}
}

int main(void)
{
	double X[100] = { 0.0 };
	double Y[100] = { 0.0 };
	double Angle[100] = { 0.0 };
	double X_ref[100] = { 0.0 };
	double Y_ref[100] = { 0.0 };
	double Dist[100] = { 0.0 };
	double yaw_angle[100] = { 0.0 };
	double Distance[100] = { 0.0 };
	double a[100] = { 0.0 };
	double b[100] = { 0.0 };
	int num = 0;

	printf("[1]\twaypoint 데이터 출력\n");
	printf("[2]\twaypoint 간의 간격 출력\n");
	printf("[3]\twaypoint 상대좌표 출력\n");
	printf("[4]\twaypoint 거리 출력\n");
	printf("[5]\twaypoint yaw각도 출력\n");
	printf("[6]\twaypoint 오름차순 출력\n");
	printf("[7]\twaypoint 내림차순 출력\n");
	printf("[8]\twaypoint 직선의 방정식 출력\n");
	printf("원하는 기능을 선택해주세요 ( 1 ~ 8 ) : ");
	scanf_s("%d", &num);

	printf("\n\n파일을 읽어옵니다.\n\n");
	read_file("waypoint.txt", X, Y, Angle);


	switch (num)
	{
	case 1:
	{
		for (int i = 0; i < n; i++)
		{
			printf("\n\nwaypoint 데이터 출력\n\n");
			printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf\n", i, X[i], i, Y[i], i, Angle[i]);
		}
		break;
	}

	case 2:
	{
		interval(X_ref, Y_ref, X, Y);
		printf("\n\nwaypoint 간의 거리 출력\n\n");
		for (int i = 0; i < n; i++)
		{
			printf("Interval - X[%d] = %lf, Y[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
		}
		break;
	}

	case 3:
	{
		relative_coordinate(X_ref, Y_ref, X, Y);
		printf("\n\nwaypoint 상대좌표 출력\n\n");
		for (int i = 0; i < n; i++)
		{
			printf("Relative Coordinate - X_ref[%d] = %lf, Y_ref[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
		}
		break;
	}

	case 4:
	{
		DIST(X, Y, Dist);
		printf("\n\nwaypoint 거리 출력\n\n");
		for (int i = 0; i < n; i++)
		{
			printf("Distance[%d] = %lf\n", i, Dist[i]);
		}
		break;
	}

	case 5:
	{
		YawAngles(X, Y, n, yaw_angle);
		printf("\n\nwaypoint yaw 각도 출력\n\n");
		for (int i = 0; i < n - 1; i++)
		{
			printf("Yaw angle %d and %d: %.2f degrees\n", i, i + 1, yaw_angle[i]);
		}
		break;
	}
	case 6:
	{;
		ascending_sort(X, Y, Angle, Distance, n);
		printf("\n\n거리 오름차순 출력\n\n");
		for (int i = 0; i < n; i++)
		{
			printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf, ", i, X[i], i, Y[i], i, Angle[i]);
			printf("Distance[%d] = %lf\n", i, Distance[i]);
		}
		break;
	}
	case 7:
	{
		descending_sort(X, Y, Angle, Dist, n);
		printf("\n\n거리 내림차순 출력\n\n");
		for (int i = 0; i < n; i++)
		{
			printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf, ", i, X[i], i, Y[i], i, Angle[i]);
			printf("Distance[%d] = %lf\n", i, Dist[i]);
		}
		break;
	}
	case 8:
	{
		straight(X, Y, a, b);
		printf("\n\n직선의 방정식\n\n");
		for (int i = 0; i < n - 1; i++)
		{
			printf("직선의 방정식[%d - %d]: y = %lfx + %lf \n ", i, i + 1, a[i], b[i]);
		}
		break;
	}
	}
	return 0;
}
