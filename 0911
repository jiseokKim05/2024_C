distance 를 기준으로 대하여 오름 차순 내림 차순으로 sorting 하기

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int n = 0;

void read_file(const char* filename, double X[], double Y[], double Angle[])
{
    FILE* file = fopen(filename, "r");

    if (file == NULL)
    {
        printf("File doesn't exist\n");
        return;
    }

    while (fscanf(file, "%lf %lf %lf", &X[n], &Y[n], &Angle[n]) != EOF)
    {
        n++;
        if (n >= 100)
        {
            break;
        }
    }

    fclose(file);
}

void interval(double X_ref[], double Y_ref[], double X[], double Y[])
{
    for (int i = 1; i < n; ++i)
    {
        X_ref[i] = X[i] - X[i - 1];
        Y_ref[i] = Y[i] - Y[i - 1];
    }
}

void relative_coordinate(double X_ref[], double Y_ref[], double X[], double Y[])
{
    for (int i = 0; i < n; ++i)
    {
        X_ref[i] = X[i] - X[0];
        Y_ref[i] = Y[i] - Y[0];
    }
}

void DIST(double X[], double Y[], double Dist[])
{
    for (int i = 1; i < n; ++i)
    {
        Dist[i] = sqrt((X[i] - X[i - 1]) * (X[i] - X[i - 1]) + (Y[i] - Y[i - 1]) * (Y[i] - Y[i - 1]));
    }
}


void swap(double* a, double* b) {
    double temp = *a;
    *a = *b;
    *b = temp;
}

void descending_sort(double X[], double Y[], double Angle[], double Distance[], int column) {
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n - i; j++) {
            if (Distance[j] < Distance[j + 1]) {
                swap(&X[j], &X[j + 1]);
                swap(&Y[j], &Y[j + 1]);
                swap(&Angle[j], &Angle[j + 1]);
                swap(&Distance[j], &Distance[j + 1]);
            }
        }
    }
}

void ascending_sort(double X[], double Y[], double Angle[], double Distance[], int column) {
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n - i; j++) {
            if (Distance[j] > Distance[j + 1]) {
                swap(&X[j], &X[j + 1]);
                swap(&Y[j], &Y[j + 1]);
                swap(&Angle[j], &Angle[j + 1]);
                swap(&Distance[j], &Distance[j + 1]);
            }
        }
    }
}

int main(void)
{
    double X[100] = { 0.0 };
    double Y[100] = { 0.0 };
    double Angle[100] = { 0.0 };
    double X_ref[100] = { 0.0 };
    double Y_ref[100] = { 0.0 };
    double Dist[100] = { 0.0 };
    int num = 0;

    printf("(1) waypoint 데이터 출력\n");
    printf("(2) waypoint 간의 간격 출력\n");
    printf("(3) waypoint 상대좌표 출력\n");
    printf("(4) waypoint 거리 출력\n");
    printf("(5) waypoint 거리 기준 오름차순 정렬\n");
    printf("(6) waypoint 거리 기준 내림차순 정렬\n");
    scanf("%d", &num);

    read_file("waypoint.txt", X, Y, Angle);
    DIST(X, Y, Dist);  // 거리 계산을 미리 수행

    switch (num)
    {
    case 1:
    {
        for (int i = 0; i < n; i++)
        {
            printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf\n", i, X[i], i, Y[i], i, Angle[i]);
        }
        break;
    }
    case 2:
    {
        interval(X_ref, Y_ref, X, Y);
        for (int i = 1; i < n; i++)
        {
            printf("Interval - X[%d] = %lf, Y[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
        }
        break;
    }
    case 3:
    {
        relative_coordinate(X_ref, Y_ref, X, Y);
        for (int i = 0; i < n; i++)
        {
            printf("Relative Coordinate - X_ref[%d] = %lf, Y_ref[%d] = %lf\n", i, X_ref[i], i, Y_ref[i]);
        }
        break;
    }
    case 4:
    {
        DIST(X, Y, Dist);
        for (int i = 1; i < n; i++)
        {
            printf("Distance[%d] = %lf\n", i, Dist[i]);
        }
        break;
    }
    case 5:
        ascending_sort(X, Y, Angle, Dist, n);
        printf("Ascending order based on distance:\n");
        for (int i = 1; i < n; i++) {
            printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf, Distance[%d] = %lf\n",
                i, X[i], i, Y[i], i, Angle[i], i, Dist[i]);
        }
        break;
    case 6:
        descending_sort(X, Y, Angle, Dist, n);
        printf("Descending order based on distance:\n");
        for (int i = 1; i < n; i++) {
            printf("X[%d] = %lf, Y[%d] = %lf, Angle[%d] = %lf, Distance[%d] = %lf\n",
                i, X[i], i, Y[i], i, Angle[i], i, Dist[i]);
        }
        break;
    }
    return 0;
}
