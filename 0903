####메모장 읽고 배열하기

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void) {
    int temp;
    int A[100] = { 0, };
    int n = 0;
    FILE* fp = fopen("data.txt", "r");


    if (fp == NULL) {
        printf("파일을 열 수 없습니다.\n");
        return 1; 
    }

    do {
        if (fscanf(fp, "%d", &temp) == 1) {
            A[n] = temp;
            n++;
        }
        else break;
    } while (A[n] != EOF);

    fclose(fp);

    printf("파일의 개수: %d\n\n", n);
    printf("파일에서 읽은 값들:\n\n");
    for (int i = 0; i < n; i++) {
        printf("%d\n", A[i]);
    }
    printf("\n");

    return 0;
}
***
#### 메모장에서 읽은것들중 최댓값 최솟값

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void) {
    int temp1;       // 파일에서 읽어온 값을 임시로 저장할 변수
    int result;      // fscanf 함수의 결과를 저장할 변수 (성공/실패)
    int min, max;    // 최소값과 최대값을 저장할 변수
    int num = 0;     // 읽어온 값의 개수를 세는 변수
    int A[100];      // 파일에서 읽어온 값을 저장할 배열
    FILE* fp;        // 파일 관리를 위한 파일 포인터

    // 파일을 읽기 모드로 열기
    fp = fopen("Data.txt", "r");
    if (fp == NULL) {
        // 파일을 열지 못한 경우
        printf("파일이 존재하지 않습니다.\n\n");
        return -1; // 오류 코드를 반환하고 프로그램 종료
    }
    else {
        // EOF (파일 끝)까지 정수를 읽어오는 반복문
        do {
            result = fscanf(fp, "%d", &temp1);
            if (result != EOF) {
                A[num] = temp1; // 읽어온 값을 배열에 저장
                num++; // 값의 개수를 증가
            }
        } while (result != EOF);

        printf("파일에 있는 값의 개수: %d\n", num);

        // 최소값 초기화 (배열의 첫 번째 값으로 설정)
        min = A[0];

        printf("\nMin값 출력\n");
        for (int i = 0; i < num; i++) {
            if (min > A[i]) {
                min = A[i]; // 더 작은 값이 있으면 최소값 갱신
            }
        }
        printf("Min값: %d\n", min);

        // 최대값 초기화 (배열의 첫 번째 값으로 설정)
        max = A[0];

        printf("\nMax값 출력\n");
        for (int i = 0; i < num; i++) {
            if (max < A[i]) {
                max = A[i]; // 더 큰 값이 있으면 최대값 갱신
            }
        }
        printf("Max값: %d\n", max);
    }

    fclose(fp);  // 열었던 파일을 닫음
    return 0;
}

